#pragma once 
#include<iostream>
#include<vector>
#include<assert.h>
using namespace std;
namespace haha
{
	//N代表比特位的个数
	template<size_t N>
	class bitset
	{
	public:
		bitset()
		{
			_bs.resize((N >> 3) + 1);
			_count = 0;
		}

		//将num的比特位置置1
		bitset<N>& set(size_t num)
		{
			assert(num < N);

			//计算num所对应的字节
			size_t index = (num>>3);

			//计算num所对应字节的比特位
			size_t pos = num % 8;

			_bs[index] |= (1 << pos);
			_count++;
			return *this;
		}

		//将num的比特位置置0
		bitset<N>& reset(size_t num)
		{
			assert(num < N);

			//计算num所对应的字节
			size_t index = (num >> 3);

			//计算num所对应字节的比特位
			size_t pos = num % 8;

			_bs[index] &= ~(1 << pos);
			_count--;
			return *this;
		}

		size_t size() const
		{
			return N;
		}

		size_t count()const
		{

			return _count;
		}

		bool test(size_t num) const
		{
			assert(num < N);

			//计算num所对应的字节
			size_t index = (num >> 3);

			//计算num所对应字节的比特位
			size_t pos = num % 8;

			return 0!= (_bs[index] & (1 << pos));
		}
	private:
		vector<unsigned char> _bs;
		size_t _count;	//位置为1的数量
	};
}

void TestBitSet()
{
	haha::bitset<100> bs;
	int array[] = { 1,3,7,4,12,16,19,16,22,18 };
	for (auto e : array)
		bs.set(e);

	cout << bs.count() << endl;
	cout << bs.size() << endl;

	bs.reset(12);
	cout << bs.count() << endl;
	cout << bs.size() << endl;


}