20.有效的括号
给定一个只包括 '('，')'，'{'，'}'，'['，']'?的字符串，判断字符串是否有效。

有效字符串需满足：

左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。
注意空字符串可被认为是有效字符串。

示例 1:

输入: "()"
输出: true
示例?2:

输入: "()[]{}"
输出: true
示例?3:

输入: "(]"
输出: false
示例?4:

输入: "([)]"
输出: false
示例?5:

输入: "{[]}"
输出: true

class Solution {
public:
    bool isValid(string s) {
        stack<char> st;
        int i=0;
        while(i<s.size())
        {
            if(s[i]=='('||s[i]=='['||s[i]=='{')
            {
                st.push(s[i]);
            }
            else
            {
                if(s[i]==')')
                {
                    if(!st.empty()&&st.top()=='(')
                    {
                        st.pop();
                    }
                    else
                    {
                        st.push(s[i]);
                    }
                }
                else if(!st.empty()&&s[i]==']')
                {
                    if(st.top()=='[')
                    {
                        st.pop();
                    }
                    else
                    {
                        st.push(s[i]);
                    }
                        
                }
                else
                {
                    if(!st.empty()&&st.top()=='{')
                    {
                        st.pop();
                    }
                    else
                    {
                        st.push(s[i]);
                    }
                }
               
            }
            i++;
        }
        return st.empty();
        
    }
};

使用队列实现栈的下列操作：

push(x) -- 元素 x 入栈
pop() -- 移除栈顶元素
top() -- 获取栈顶元素
empty() -- 返回栈是否为空
注意:

你只能使用队列的基本操作-- 也就是?push to back, peek/pop from front, size, 和?is empty?这些操作是合法的。
你所使用的语言也许不支持队列。?你可以使用 list 或者 deque（双端队列）来模拟一个队列?, 只要是标准的队列操作即可。
你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作
class MyStack {
    private:
        queue<int> q;
      
public:
    /** Initialize your data structure here. */
    MyStack() {
        
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        q.push(x);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        for(int i=0;i<q.size()-1;i++)
        {
            int n=q.front();
            q.pop();
            q.push(n);
        }
        int n=q.front();
        q.pop();
        return n;
    }
    
    /** Get the top element. */
    int top() {
         for(int i=0;i<q.size()-1;i++)
        {
            int n=q.front();
            q.pop();
            q.push(n);
        }
        int n=q.front();
        q.pop();
        q.push(n);
        return n;
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return q.empty();
    }
};

使用栈实现队列的下列操作：

push(x) -- 将一个元素放入队列的尾部。
pop() -- 从队列首部移除元素。
peek() -- 返回队列首部的元素。
empty() -- 返回队列是否为空。
示例:

MyQueue queue = new MyQueue();

queue.push(1);
queue.push(2);  
queue.peek();  // 返回 1
queue.pop();   // 返回 1
queue.empty(); // 返回 false
说明:

你只能使用标准的栈操作 -- 也就是只有?push to top,?peek/pop from top,?size, 和?is empty?操作是合法的。
你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。
假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。
class MyQueue {
    private:
    stack<int> st1;//入栈
    stack<int> st2;//出栈
public:
    /** Initialize your data structure here. */
    MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        st1.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        assert(!st1.empty()||!st2.empty());
        if(!st2.empty())
        {
            int i=st2.top();
            st2.pop();
            return i;
        }
        else
        {
            while(!st1.empty())
            {
                int i=st1.top();
                st1.pop();
                st2.push(i);
            }
            int i=st2.top();
            st2.pop();
            return i;
        }
    }
    
    /** Get the front element. */
    int peek() {
        assert(!st1.empty()||!st2.empty());
        if(!st2.empty())
        {
            return st2.top();
        }
        else
        {
            while(!st1.empty())
            {
                int i=st1.top();
                st1.pop();
                st2.push(i);
            }
            
            return st2.top();
        }
        
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return st1.empty()&&st2.empty();
    }
};
设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。

push(x)?-- 将元素 x 推入栈中。
pop()?-- 删除栈顶的元素。
top()?-- 获取栈顶元素。
getMin() -- 检索栈中的最小元素。
示例:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> 返回 -3.
minStack.pop();
minStack.top();      --> 返回 0.
minStack.getMin();   --> 返回 -2.
class MinStack {
    private:
    stack<int> st1;     //正常入栈
    stack<int> st2;     //保存最小值
public:
    /** initialize your data structure here. */
    MinStack() {
        
    }
    
    void push(int x) {
        if(st1.empty())
        {
            st1.push(x);
            st2.push(x);
        }
        else
        {
            if(x<st2.top())
            {
                st2.push(x);
            }
            else
            {
                st2.push(st2.top());
            }
            st1.push(x);
                
        }
    }
    
    void pop() {
        
        st1.pop();
        st2.pop();
    }
    
    int top() {
        return st1.top();
    }
    
    int getMin() {
        return st2.top();
    }
};