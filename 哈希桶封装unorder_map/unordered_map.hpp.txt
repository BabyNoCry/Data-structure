#pragma once
#include"HashBucket.hpp"
#include<assert.h>
namespace haha
{
	template<class K,class V,class HF = DFDef<K>>
	class unordered_map
	{
		typedef pair<K, V> ValueType;
		typedef unordered_map<K, V, HF> Self;
		struct KeyOfValue
		{
			const K& operator()(const ValueType& data)
			{
				return data.first;
			}
		};
		typedef HashBucket<ValueType,K, KeyOfValue,HF> HB;

	public:
		typename typedef HB::Iterator iterator;

	public:
		unordered_map(size_t n)
			:_hb(n)
		{}

		/////////////////////////
		//iterator
		iterator begin()
		{
			return _hb.Begin();
		}
		iterator end()
		{
			return _hb.End();
		}

		size_t size()
		{
			return _hb.Size();
		}

		bool empty()const
		{
			return _hb.Empty();
		}
		V& operator[](const K& key)
		{
			return (*(_hb.Insert(ValueType(key, V())).first))->second;
		}


		iterator find(const K& key)
		{
			return _hb.Find(key);
		}
		pair<iterator, bool>insert(const ValueType& data)
		{
			return _hb.Insert(data);
		}
		size_t erase(const K& key)
		{
			return _hb.Erase(key);
		}

		void Clear()
		{
			_hb.Clear();
		}

		void swap(Self& s)
		{
			_hb.Swap(s._ht);
		}

		size_t bucket_count() const
		{
			return _hb.BucketCount();
		}

		size_t bucket_size(size_t n) const
		{
			return _hb.BucketSize(n);
		}
	private:
		HB _hb;

	};
}

void TestUnorderedMap()
{
	haha::unordered_map<int, int> m(10);
	int array[] = { 4,5,7,8,1,0,9,2,6,3 };
	for (auto e : array)
		m.insert(make_pair(e, e));

	cout << m.size() << endl;
	cout << m.bucket_count() << endl;
	cout << m.bucket_size(1) << endl;

	
	auto it = m.begin();
	
	while (it != m.end())
	{
		cout << it->first << "---->" << it->second << endl;
		it++;
	}
	cout << endl*/;
	for (auto e : m)
	{
		cout << e.first << " " << e.second << endl;

	}

	if (m.end() != m.find(1))
	{
		cout << "1 is in unordered_map" << endl;

	}
	else
		cout << "1 is not unoedered_map" << endl;

	
}