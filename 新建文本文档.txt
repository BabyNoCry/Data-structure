  //求超过数组长度一半的数字
int num(int a[],int x)
{
	int min=a[0];
	int max=a[0];
	for(int i=0;i<x;i++)
	{
		if(a[i]>max)
		{
			max=a[i];
		}
		if(a[i]<min)
		{
			min=a[i];
		}
		
	}
	vector<int> v;
	v.resize(max-min+1);
	
	for(int i=0;i<x;i++)
	{
		v[a[i]-min]++;
	 } 
	 for(int i=0;i<v.size();i++)
	 {
	 	if(v[i]>x/2)
	 		return i+min;
	 }
	 return -1;
}

//输出一个数组最大连续子序列的和
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int num=0;
        int sum=nums[0];
        for(int i=0;i<nums.size();i++)
        {
            if(num<0)
                num=nums[i];
            else
                num+=nums[i];
            if(num>sum)
                sum=num;
        }
        return sum;
        
    }
};