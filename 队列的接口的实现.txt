Quque.h 文件
#ifndef    __QUEUE_H__
#define   __QUEUE_H__

#include<stdio.h>
#include<stdlib.h>
#include<assert.h>
#include<string.h>
#include<malloc.h>
#include<time.h>


typedef int QUDataType;
typedef struct QueueNode
{
      struct QueueNode* _next;
      QUDataType _data;
}QueueNode;
typedef struct Queue
{
QueueNode* _head; // ?óí・
QueueNode* _tail; // ?ó?2
}Queue;



void QueueInit(Queue* pq);
void QueueDestory(Queue* pq);
QueueNode* BuyQueueNode(QUDataType x);

void QueuePush(Queue* pq, QUDataType x);
void QueuePop(Queue* pq);

QUDataType QueueFront(Queue* pq);
QUDataType QueueBack(Queue* pq);

int QueueEmpty(Queue* pq);
int QueueSize(Queue* pq);

void QueuePrint(Queue* pq);

void TestQueue();

#endif

Queue.c
#include "Queue.h"
//初始化队列
void QueueInit(Queue* pq)
{
      assert(pq);
      pq->_head  = pq->_tail = NULL;
}

//销毁队列
void QueueDestory(Queue* pq)
{
	struct QueueNode* cur = pq->_head ;
    assert(pq);
	while(cur)
	{
	  struct QueueNode* next = cur->_next ;
      free(cur);
	  cur = next;
	}
	pq->_head = pq->_tail = NULL;
}

//创建结点
QueueNode* BuyQueueNode(QUDataType x)
{
   QueueNode*  node = (QueueNode*)malloc(sizeof(QueueNode));
   node->_data = x;
   node->_next = NULL;
   return node;
}

//插入结点
void QueuePush(Queue* pq, QUDataType x)
{
    assert(pq);
    /*QueueNode* newnode = (QueueNode*)malloc(sizeof(QueueNode)); 一样的代码，上面就是自己定义了一个
    newnode->_data = x;
	newnode->_next = NULL;
	if(pq->_tail == NULL)
	{
	   pq->_tail = pq->_head  = newnode;
	}
	else
	{
	    pq->_tail ->_next = newnode;
		pq->_tail = newnode;
	}*/   
    if(pq->_head  == NULL)
	{
	   pq->_head  = pq->_tail = BuyQueueNode(x);
	}
	else
	{
	    pq->_tail ->_next = BuyQueueNode(x);
		pq->_tail = pq->_tail ->_next ;
	}

}
//删除结点
void QueuePop(Queue* pq)
{
    assert(pq);
	if(pq->_head )
	{
	    QueueNode* next = pq->_head ->_next ;
		free(pq->_head );
		pq->_head = next ; 
       if(pq->_head  == NULL)
		{
		   pq->_tail = NULL;
		}
	}
}

//结点数目
int QueueSize(Queue* pq)
{
    int size = 0;
	struct QueueNode* cur = pq->_head ;
	assert(pq);
	while(cur != NULL)
	{
	     ++size;
		 cur = cur->_next ;
	}
	return size;
}
//判断是否为空
int QueueEmpty(Queue* pq)
{
	assert(pq);
	return pq->_head == pq->_tail  ? 0 : 1;
}

//求对头数据
QUDataType QueueFront(Queue* pq)
{
     assert(pq);
	 return pq->_head ->_data ;
}
//求对尾数据
QUDataType QueueBack(Queue* pq)
{
    assert(pq);
	return pq->_tail ->_next ;
}

//输出队列
void QueuePrint(Queue* pq)
{
	QueueNode* cur = pq->_head;
	assert(pq);
	while(cur != NULL)
	{
        printf("%d ",cur->_data);
		cur = cur ->_next ;
    }
   printf("\n");
}

