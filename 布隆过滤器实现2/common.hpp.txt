#pragma once 
#include<string>

size_t GetNextPrime(size_t prime);

struct STR2INT1
{
	size_t operator()(const std:: string& s)
	{
		return SDBMHash(s.c_str());
	}
	size_t SDBMHash(const char *str)
	{
		register size_t hash = 0;
		while (size_t ch = (size_t)*str++)
		{
			hash = 65599 * hash + ch;
			//hash = (size_t)ch + (hash << 6) + (hash << 16) - hash;  
		}
		return hash;
	}
};


struct STR2INT2
{
	size_t operator()(const std::string& s)
	{
		return RSHash(s.c_str());
	}
	size_t RSHash(const  char* str)
	{
		register size_t hash = 0;
		size_t magic = 63689;
		while (size_t ch = (size_t)*str++)
		{
			hash = hash * magic + ch;
			magic *= 378551;
		}
		return hash;
	}

};



struct STR2INT3
{
	size_t operator()(const std::string& s)
	{
		return APHash(s.c_str());
	}
	size_t APHash(const char* str)
	{
		register size_t hash = 0;
		size_t ch;
		for (long i = 0; ch = (size_t)*str++; i++)
		{
			if ((i & 1) == 0)
			{
				hash ^= ((hash << 7) ^ ch ^ (hash >> 3));
			}
			else
			{
				hash ^= (~((hash << 11) ^ ch ^ (hash >> 5)));
			}
		}
		return hash;
	}
};





struct STR2INT4
{
	size_t operator()(const std::string& s)
	{
		return JSHash(s.c_str());
	}
	size_t JSHash(const char* str)
	{
		if (!*str)        // 这是由本人添加，以保证空字符串返回哈希值0  
			return 0;
		register size_t hash = 1315423911;
		while (size_t ch = (size_t)*str++)
		{
			hash ^= ((hash << 5) + ch + (hash >> 2));
		}
		return hash;
	}
};





struct STR2INT5
{
	size_t operator()(const std::string& s)
	{
		return DEKHash(s.c_str());
	}
	size_t DEKHash(const char* str)
	{
		if (!*str)        // 这是由本人添加，以保证空字符串返回哈希值0  
			return 0;
		register size_t hash = 1315423911;
		while (size_t ch = (size_t)*str++)
		{
			hash = ((hash << 5) ^ (hash >> 27)) ^ ch;
		}
		return hash;
	}
};

