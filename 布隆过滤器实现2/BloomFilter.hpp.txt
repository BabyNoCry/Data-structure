#pragma once
#include"BitSet.hpp"
#include"common.hpp"
#include<iostream>
using namespace std;

namespace haha
{
	template<size_t N, class T,
		class HF1 = STR2INT1,
		class HF2 = STR2INT2,
		class HF3 = STR2INT3,
		class HF4 = STR2INT4,
		class HF5 = STR2INT5>
	class BloomFilter
	{
	public:
		BloomFilter(size_t size = 0)
		{
			_size = size;
		}

		void Insert(const  T& data)
		{
			size_t index1 = HF1()(data) % N;
			size_t index2 = HF2()(data) % N;
			size_t index3 = HF3()(data) % N;
			size_t index4 = HF4()(data) % N;
			size_t index5 = HF5()(data) % N;
			_bs.set(index1);
			_bs.set(index2);
			_bs.set(index3);
			_bs.set(index4);
			_bs.set(index5);
			++_size;

		}

		bool IsIn(const T& data)
		{
			size_t index = HF1()(data)% N;
			if (!_bs.test(index))
				return false;

			index = HF2()(data)% N;
			if (!_bs.test(index))
				return false;

			index = HF3()(data) % N;
			if (!_bs.test(index))
				return false;

			index = HF4()(data)% N;
			if (!_bs.test(index))
				return false;

			index = HF5()(data)% N;
			if (!_bs.test(index))
				return false;

			return true;

		}


	private:
		bitset<N> _bs;
		size_t _size;
	};
}

void Test()
{
	haha::BloomFilter<100, string,STR2INT1, STR2INT2, STR2INT3, STR2INT4, STR2INT5 > bf;
	bf.Insert("goodmorning");
	bf.Insert("today");
	bf.Insert("hello");
	bf.Insert("world");

	cout << bf.IsIn("hello") << endl;
	cout << bf.IsIn("today") << endl;
	cout << bf.IsIn("world") << endl;
	cout << bf.IsIn("goodmorning") << endl;


}