根据二叉树创建字符串
空节点则用一对空括号 "()" 表示。而且你需要省略所有不影响字符串与原始二叉树之间的一对一映射关系的空括号对。

示例 1:

输入: 二叉树: [1,2,3,4]
       1
     /   \
    2     3
   /    
  4     

输出: "1(2(4))(3)"

解释: 原本将是“1(2(4)())(3())”，
在你省略所有不必要的空括号对之后，
它将是“1(2(4))(3)”。
示例 2:

输入: 二叉树: [1,2,3,null,4]
       1
     /   \
    2     3
     \  
      4 

输出: "1(2()(4))(3)"
解释: 和第一个示例相似，
除了我们不能省略第一个对括号来中断输入和输出之间的一对一映射关系。
代码如下：
class Solution {
public:
    string tree2str(TreeNode* t) {
     
        if(t==NULL)
            return "";
        string s="";
        s+=to_string(t->val);
        if(t->left)
        {
            s+="("+tree2str(t->left)+")";
        }
        else if(t->right)
        {
            s+="()";
        }
        
        if(t->right)
        {
            s+="("+tree2str(t->right)+")";
        }
        return s;
            
    }
};

二叉树的层序遍历
给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。

例如:
给定二叉树:?[3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其层次遍历结果：

[
  [3],
  [9,20],
  [15,7]
]
思路：
首先还是应该将根节点插入到队列中，取出队列首元素，将该元素的值放在临时的一维数组中，再将该元素的非空左孩子有孩子节点插入到队列中，删除首元素。再循环，直到队列为空，结束循环。得到最后的结果。

需要注意的是：在判断是否该到下一层时，我们需要定义一个临时的队列来暂时存储下一层的节点，为什么？因为有了这个临时的队列，我们可以只判断队列q是否为空，若为空，则表示该层遍历结束，该遍历下一层了。 这时我们再将临时的队列与q交换再继续插入判断即可。
代码如下;
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        queue<TreeNode*> q1;
        queue<TreeNode*> q2;
         vector<vector<int>> ret;        
        if(root==NULL)
            return ret;
        q1.push(root);     
        while(!q1.empty())
        {
            vector<int> v;
            while(!q1.empty())
            { 
                TreeNode* front = q1.front();
                v.push_back(front->val);
                q1.pop();
                if(front->left)
                {
                    q2.push(front->left);
                }
                if(front->right)
                {
                    q2.push(front->right);
                }
             }
            swap(q1,q2);
            ret.push_back(v);
           
            
        } 
        return ret;
    }
};

二叉树的最近公共祖先
给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。

百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”

例如，给定如下二叉树:? root =?[3,5,1,6,2,0,8,null,null,7,4]

示例 1:

输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
输出: 3
解释: 节点 5 和节点 1 的最近公共祖先是节点 3。
代码如下：
class Solution {
public:
    bool Inl_r(TreeNode* &root,TreeNode* &p)
    {
        if(root==NULL)
            return false;
        if(root==p)
            return true;
        return Inl_r(root->left,p)||Inl_r(root->right,p);
      
        
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root==NULL||p==NULL||q==NULL)
            return NULL;
        if(p==root||q==root)
        {
            return q==root?q:p;
        }
        int pp=Inl_r(root->left,p)?1:2;
        int qq=Inl_r(root->left,q)?1:2;
        if(pp!=qq)
            return root;
        else if(pp==1)
        {
            return lowestCommonAncestor(root->left,p,q);
        }
        else
        {
            return lowestCommonAncestor(root->right,p,q);
        }       
    }
};


二叉搜索树与双向链表
思路：
首先：利用BST的中序遍历得到有序序列（递归）
其次：通过调整节点指针，将有序链表调整为双向链表

输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。
class Solution {
public:
    TreeNode* Convert(TreeNode* pRootOfTree)
    {
        if(pRootOfTree == nullptr) return nullptr;
 
        // 双向链表尾节点
        TreeNode* list_last = nullptr;
 
        // 递归建立双向链表
        ConvertNode(pRootOfTree,list_last);
 
        // 查找双向链表首节点
        while(list_last->left != nullptr)
        {
            list_last = list_last->left;
        }
 
        // 返回双向链表的首节点
        return list_last;
    }
 
    // 对BST中序遍历，得到有序序列；调整序列元素的指针，将有序序列调整为双向链表
    void ConvertNode(TreeNode* cur,TreeNode *&list_last) // 注意形参
    {
        // 边界条件(递归出口)
        if(cur==nullptr) return ;
 
        // 遍历左子树
        if(cur->left != nullptr) ConvertNode(cur->left,list_last);
 
        // 建立双向链接
        cur->left = list_last;                           // 单侧链接
        if(list_last != nullptr) list_last->right = cur; // 单侧链接
        list_last = cur;
 
        //遍历右子树
        if(cur->right != nullptr) ConvertNode(cur->right,list_last);
    }
};
二叉树的遍历
编一个程序，读入用户输入的一串先序遍历字符串，根据此字符串建立一个二叉树（以指针方式存储）。 例如如下的先序遍历字符串： ABC##DE#G##F### 其中“#”表示的是空格，空格字符代表空树。建立起此二叉树以后，再对二叉树进行中序遍历，输出遍历结果。
输入描述:
输入包括1行字符串，长度不超过100。
输出描述:
可能有多组测试数据，对于每组数据，
输出将输入字符串建立二叉树后中序遍历的序列，每个字符后面都有一个空格。
每个输出结果占一行。
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

char array[101];

//二叉树结点
typedef struct BiTNode {
	char data;
	struct BiTNode *lchild, *rchild;
}BiTNode, *BiTree;

//按先序序列创建二叉树
void CreateBiTree(BiTree &T, int &index, int &n) {
	if (index == n) {
		return;
	}
	//按先序次序输入二叉树中结点的值（一个字符），‘#’表示空树
	if (array[index] == '#') {
		T = NULL;
		index++;
	}
	else {
		T = (BiTree)malloc(sizeof(BiTNode));
		//生成根结点
		T->data = array[index];
		index++;
		//构造左子树
		CreateBiTree(T->lchild, index, n);
		//构造右子树
		CreateBiTree(T->rchild, index, n);
	}
	return;
}
//输出

void Visit(BiTree T) {
	if (T->data != '#') {
		printf("%c ", T->data);
	}
}
//中序遍历
int InOrder(BiTree T) {
	if (T != NULL) {
		//访问左子结点
		InOrder(T->lchild);
		//访问根节点
		printf("%c ", T->data);
		//访问右子结点
		InOrder(T->rchild);
	}
	return 0;
}
int main()
{
	int len, index;
	while (scanf("%s", array) != EOF) {
		BiTree T;
		len = strlen(array);
		index = 0;
		//创建二叉树
		CreateBiTree(T, index, len);
		//中序遍历
		InOrder(T);
		printf("\n");
	}
	return 0;
}
从前序与中序序列构造二叉树
根据一棵树的前序遍历与中序遍历构造二叉树。

注意:
你可以假设树中没有重复的元素。

例如，给出

前序遍历 preorder =?[3,9,20,15,7]
中序遍历 inorder = [9,3,15,20,7]
返回如下的二叉树：

    3
   / \
  9  20
    /  \
   15   7

代码如下：
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
         if(preorder.size()==0) return NULL;    //空树
        TreeNode* root = new TreeNode(preorder[0]);
        if(preorder.size()==1) return root;    //只有一个节点

        vector<int> leftIn,leftPre,rightIn,rightPre;
        int location = 0;
        while(inorder[location]!=root->val){
            leftIn.push_back(inorder[location]);
            location++;
        }
        for(int i=1;i<=location;i++) leftPre.push_back(preorder[i]);
        for(int i=location+1;i<preorder.size();i++){
            rightPre.push_back(preorder[i]);
            rightIn.push_back(inorder[i]);
        }
        root->left = buildTree(leftPre,leftIn);
        root->right = buildTree(rightPre,rightIn);
        return root;

    }
};


从中序与后序序列构造二叉树
根据一棵树的中序遍历与后序遍历构造二叉树。

注意:
你可以假设树中没有重复的元素。

例如，给出

中序遍历 inorder =[9,3,15,20,7]
后序遍历 postorder = [9,15,7,20,3]
返回如下的二叉树：

    3
   / \
  9  20
    /  \
   15   7
代码：
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        return driver(postorder, inorder, 0, postorder.size() - 1, 0, inorder.size() - 1);
    }
    TreeNode* driver(vector<int>& postorder, vector<int>& inorder, int p_lo, int p_hi, int i_lo, int i_hi) {
        if (p_lo > p_hi) return NULL;
        if (p_lo == p_hi) return new TreeNode(postorder[p_hi]);
        int node_val = postorder[p_hi];
        int index_in = this->find(inorder, i_lo, i_hi, node_val);
        int pre_left_len = index_in - i_lo;
        TreeNode* node = new TreeNode(node_val);
        node->left = driver(postorder, inorder, p_lo, p_lo + pre_left_len - 1, i_lo, index_in - 1);
        node->right = driver(postorder, inorder, p_lo + pre_left_len, p_hi - 1, index_in + 1, i_hi);
        return node;
    }
    int find(vector<int>& vec, int low, int high, int val) {
        for (int i = low; i <= high; ++i) {
            if (vec[i] == val) return i;
        }
        return -1;
    }
};

二叉树三种遍历方式的非递归（迭代）法求解
二叉树前序遍历
递归：
class Solution {
public:
      void rec(TreeNode* root,vector<int> &ret){
        if(root != NULL){
            ret.push_back(root->val);
            rec(root->left,ret);
            rec(root->right,ret);
        }
    }

    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> v;
        
       rec(root,v);
        return v;
    }
};
迭代法：
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
       
        stack<TreeNode*> st;
        vector<int> v;
        if(root==NULL)
            return v;
        TreeNode* cur = root;
        while(!st.empty()||cur)
        {
            while(cur!=NULL)
            {
                v.push_back(cur->val);
                st.push(cur);
                cur=cur->left;
            }
           
                TreeNode* top=st.top();
                st.pop();
            //遍历右子树
            cur=top->right;
            
        }
        return v;
    }
};

二叉树中序遍历
递归法：
class Solution {
public:
    void ret(TreeNode* root,vector<int>& v)
    {
        if(root!=NULL)
        { 
            ret(root->left,v);
            v.push_back(root->val);
           
            ret(root->right,v);
        }
            
    }
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> v;
        ret(root,v);
        return v;
    }
};

迭代法：
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> v;
        stack<TreeNode*> st;
        if(root==NULL)
            return v;
        TreeNode* cur=root;
        while(!st.empty()||cur)
        {
            while(cur)
            {
                st.push(cur);
	
	//先走左
                cur=cur->left;
            }
            
            TreeNode* top = st.top();
	//根
            v.push_back(top->val);
            st.pop();
	//右子树
            cur=top->right;
        }
        return v;
    }
}

二叉树的后序遍历
递归法：

class Solution {
public:
    void ret(TreeNode* root,vector<int>& v)
    {
        if(root!=NULL)
        { 
            ret(root->left,v);

            ret(root->right,v);
	v.push_back(root->val);
        }
            
    }
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> v;
        ret(root,v);
        return v;
    }
};
迭代法：
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int > v;
        stack<TreeNode* > st;
        TreeNode* prev=NULL;
        if(root==NULL)
            return v;
        TreeNode* cur = root;
        while(!st.empty()||cur)
        {
            while(cur)
            {
                st.push(cur);
                cur=cur->left;
            }
            TreeNode* top=st.top();
            if(prev==top->right||top->right==NULL)
            {
                prev = top;
                v.push_back(top->val);
                st.pop();   
            }
            else
            {
                cur=top->right;
            }
        }
        return v;
    }
};
