test.c文件包括如下语句:
#define INT_PTR  int*
typedef int*  int_prt
INT_PTR  a, b;
int_ptr c,d;
该题涉及：宏替换，与重命名的却被与细节。
宏替换：仅仅是替换。
重命名则不同。
问题：
文件定义的四个变量，那个变量不是指针类型 ：_b_

【剑指offer】题目：
在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，
每一列都按照从上到下递增的顺序排序。请完成一个函数，
输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
分析：
int array[][3]={(1,2,3),(4,5,6),(7,8,9)};
根据这样的数组的特性我们可以按照行和列去查找，
从第一行的最后一个元素查起来，如果必要找的数大，就向左移动查找，如果小就向下移动。
解决代码入下：
class solution{
	public:
	bool Find(vector<vector<int>>array,int val)
	{
		int row=array.size();
		int col=array[0].size();
		int i=0;
		int j=col-1;
		if(row==0||col==0)
			return false;
		while(i<row&&j<=0)
		{
			if(v[i][j]==val)
			return true;
			else if(v[i][j]>val)
			{
				j--;
			}
			else
			{
				i++;
			}
		}
		return false;
	}	
} 

智力题：
有1000瓶药物，其中一个是有毒的，小白鼠吃了一个星期以后就会死掉！请问，在一个
星期内找出有毒的药物，最少需要多少只小白鼠？
思路：

可以先考虑简单的情况： 喝了毒药之后马上死亡，要求用最少的喝药次数找到毒药：

第一次： 将1-500瓶兑在一起喝。

如果老鼠死了，则拿另一只老鼠去品尝501-725瓶兑的药水。否则去喝2-250瓶兑的水。

采用如此二分法，因为2^10>1000 ?2^9<1000,所以10次就可以找出。



现在回到原题，老鼠会在24小时后死亡，这样的化就不能跟去前一次的结果作出决策。但是可以覆盖二分的所有支路，在24小时后，一次性作出判断。

相当于将串行的二分法，改为并行的二分法。

具体如下：

第一只： 喝 1-500

第二只 1-250 ? 500-725

第三只 ?1-125 ?250-375 ? 500-625 ?725-850

....

因为2^10>1000 2^9<1000

所以最少需要10只老鼠。


2.要求写一个函数，将字符串中的空格替换为%20.
代码如下:
class solution{

	public:
	//length 系统指定最大字符串的长度 
		void replacestr(char* str,int length)
		{
			int num_blank=0;	//空格的数量
			int old_len=strlen(str);
			int i=0;
			while(str[i]!='\0')
			{
				if(str[i]==' ')
					num_blank++;
			 } 
			 int newlen=old_len+num_blank*2;	//新字符串长度 
			 if(newlen>length)
			 	return ;	//不能大于系统指定最大长度 
			int  p1=old_len-1;
			int p2=new_len-1; 
			str[new_len]='\0';
			while(p1>=0&&p1<p2)
			{
				//两指针相同，则跳出循环
				if(str[p1]==' ')
				{
					str[p2--]='0';
					str[p2--]='2';
					str[p2--]='%';
				 } 
				 else
				 {
				 	str[p2--]=str[p1];
				 }
				 p1--;
			}
		 } 
}; 

智力题：有A、B、C、D四个人，要在夜里过一座桥。他们通过这座桥分别需要耗时1、2、5、10分钟，只有一支手电（过桥必须用手电），并且同时最多只能两个人一起过桥。
请问，如何安排，能够在17分钟内这四个人都过桥？
首先,A和B同时过,需要2分钟，再A返回,需要1分钟,再D与C过桥,需要10分钟,
再B返回,需要2分钟,再AB过去2分钟.2+1+10+2+2=17

#include<iostream>
using namespace std;
//求第n个斐波那契数列的值（非递归） 
int Fib(int n)
{
	if(n==0||n==1)
	return 1;
	int* a = new int[n];
	a[0]=a[1]=1;
	for(int i=2;i<n;i++)
	{
		a[i]=a[i-1]+a[i-2];
	}
	return a[n-1];
 } 

//写一个函数求unsigned int 型变量x在内存中二进制1的个数
int num_one(unsigned int x)
{
	int num=0;
	for(int i=0;i<32;i++)
	{	
		if((x>>i)&1==1)
		{
			num++;
		}
	}
	return num;
 } 

//编写一个函数，求一个单链表倒数第k个结点。
LisNode* Node_K(ListNode* head,int k)
{
	if(head==NULL)
	return NULL;
	ListNode* fast,*slow;
	
	while(fast!=NULL)
	{
		if(k>0)
		{
			fast=fast->next;
			k--; 
		}
		else
		{
			fast=fast->next;
			slow=slow->next;
		}
	}
	 if(k==0)
	 return slow;
	 else
	 return NULL;
 } 
 
 //编写函数要求逆置单链表
 ListNode* reverse_List(ListNode* head)
 {
 	if(head==NULL||head->next==NULL)
 	return head;

 	ListNode* prev=NULL;
 	ListNode* cur=head->next;
 	ListNode* next=cur->next;
 	while(next!=NULL)
 	{
 		cur->next=prev;
 		prev=cur;
 		cur=next;
		next=next->next;	
	 }
	 cur->next=prev;
	 return cur;
  } 
