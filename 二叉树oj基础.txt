二叉树前序遍历
递归：
class Solution {
public:
      void rec(TreeNode* root,vector<int> &ret){
        if(root != NULL){
            ret.push_back(root->val);
            rec(root->left,ret);
            rec(root->right,ret);
        }
    }

    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> v;
        
       rec(root,v);
        return v;
    }
};
迭代法：
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
       
        stack<TreeNode*> st;
        vector<int> v;
        if(root==NULL)
            return v;
        TreeNode* cur = root;
        while(!st.empty()||cur)
        {
            while(cur!=NULL)
            {
                v.push_back(cur->val);
                st.push(cur);
                cur=cur->left;
            }
           
                TreeNode* top=st.top();
                st.pop();
            //遍历右子树
            cur=top->right;
            
        }
        return v;
    }
};

二叉树中序遍历
递归法：
class Solution {
public:
    void ret(TreeNode* root,vector<int>& v)
    {
        if(root!=NULL)
        { 
            ret(root->left,v);
            v.push_back(root->val);
           
            ret(root->right,v);
        }
            
    }
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> v;
        ret(root,v);
        return v;
    }
};

迭代法：
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> v;
        stack<TreeNode*> st;
        if(root==NULL)
            return v;
        TreeNode* cur=root;
        while(!st.empty()||cur)
        {
            while(cur)
            {
                st.push(cur);
	
	//先走左
                cur=cur->left;
            }
            
            TreeNode* top = st.top();
	//根
            v.push_back(top->val);
            st.pop();
	//右子树
            cur=top->right;
        }
        return v;
    }
}

二叉树的后序遍历
递归法：

class Solution {
public:
    void ret(TreeNode* root,vector<int>& v)
    {
        if(root!=NULL)
        { 
            ret(root->left,v);

            ret(root->right,v);
	v.push_back(root->val);
        }
            
    }
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> v;
        ret(root,v);
        return v;
    }
};
迭代法：
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int > v;
        stack<TreeNode* > st;
        TreeNode* prev=NULL;
        if(root==NULL)
            return v;
        TreeNode* cur = root;
        while(!st.empty()||cur)
        {
            while(cur)
            {
                st.push(cur);
                cur=cur->left;
            }
            TreeNode* top=st.top();
            if(prev==top->right||top->right==NULL)
            {
                prev = top;
                v.push_back(top->val);
                st.pop();   
            }
            else
            {
                cur=top->right;
            }
        }
        return v;
    }
};

100.相同的树
给定两个二叉树，编写一个函数来检验它们是否相同。

如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。

示例?1:

输入:       1         1
          / \       / \
         2   3     2   3

        [1,2,3],   [1,2,3]

输出: true
class Solution {

public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(!p&&!q)
            return true;
        if(!p||!q)
            return false;
        if(p->val!=q->val)
            return false;
        else
            return isSameTree(p->left,q->left)&&isSameTree(p->right,q->right);
    }
};


572.另一个数的子树
方法一：
思路是对s和t两棵树分别进行序列化，各生成一个字符串，
如果t的字符串是s的子串的话，就说明t是s的子树，但是需要注意的是，
为了避免出现[12], [2], 这种情况，虽然2也是12的子串，但是[2]却不是[12]的子树，
所以我们再序列化的时候要特殊处理一下，就是在每个结点值前面都加上一个字符，
比如','，来分隔开，那么[12]序列化后就是",12,#"，而[2]序列化之后就是",2,#"，
这样就可以完美的解决之前的问题了，参见代码如下：
class Solution {

public:
    bool isSubtree(TreeNode* s, TreeNode* t) {
        ostringstream os1, os2;
        serialize(s, os1);
        serialize(t, os2);
        return os1.str().find(os2.str()) != string::npos;
    }
    void serialize(TreeNode* node, ostringstream& os) {
        if (!node) os << ",#";
        else {
            os << "," << node->val;
            serialize(node->left, os);
            serialize(node->right, os);
        }
    }
};

方法二：
递归判断，可能从根开始，也可能从某个节点开始。
class Solution {
public:
    bool isSubtree(TreeNode* s, TreeNode* t) {
        if (!s) return false;
        if (isSame(s, t)) return true;
        return isSubtree(s->left, t) || isSubtree(s->right, t);
    }
    bool isSame(TreeNode* s, TreeNode* t) {
        if (!s && !t) return true;
        if (!s || !t) return false;
        if (s->val != t->val) return false;
        return isSame(s->left, t->left) && isSame(s->right, t->right);
    }
};

二叉树的最大深度
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root==NULL)
            return 0;
        int left=1+maxDepth(root->left);
        int right=1+maxDepth(root->right);
        return left>right?left:right;
    }
};


110.平衡二叉树
class Solution {
public:
    int maxDepth(TreeNode* root)//求高度
    {
        if(root==NULL)
            return 0;
        int left=1+maxDepth(root->left);
        int right=1+maxDepth(root->right);
        return left>right?left:right;
    }
    bool isBalanced(TreeNode* root) {//判断是否平衡
        if(root==NULL)
            return true;
        int l=maxDepth(root->left);
        int r=maxDepth(root->right);
        if(abs(l-r)<=1)
        {
            return isBalanced(root->left)&&isBalanced(root->right);
        }
        else
        {
            return false;
        }
    }
};

101.对称二叉树
class Solution {
public:
    bool _isSymmetric(TreeNode* rl,TreeNode* rr)
    {
        if(rl==NULL&&rr==NULL)
            return true;
        if(!rl||!rr)
            return false;
        if(rl->val==rr->val)
        {
            return _isSymmetric(rl->left,rr->right)&&_isSymmetric(rl->right,rr->left);
        }
        else
            return false;
    }
    bool isSymmetric(TreeNode* root) {
        if(root==NULL)
            return true;
       return _isSymmetric(root->left,root->right);
    }
};

二叉树构建及遍历
二叉树的前序、中序、后序遍历的定义： 前序遍历：对任一子树，先访问跟，然后遍历其左子树，最后遍历其右子树； 
中序遍历：对任一子树，先遍历其左子树，然后访问根，最后遍历其右子树； 
后序遍历：对任一子树，先遍历其左子树，然后遍历其右子树，最后访问根。 给定一棵二叉树的前序遍历和中序遍历，求
其后序遍历（提示：给定前序遍历与中序遍历能够唯一确定后序遍历）。
代码如下：
#include<iostream>
#include<string.h>
using namespace std;

struct BinaryTree{
    char data;
     BinaryTree *left;
     BinaryTree *right;
};

void BuildTree(BinaryTree* &Tree,char* prev,char* in,int len)
{
    Tree=(BinaryTree*)malloc(sizeof(BinaryTree));
    if(Tree!=NULL)
    {
        if(len<=0)
        {
            Tree=NULL;
            return ;
        }
        int index=0;
        while(index<len&&*(prev)!=*(in+index))
        {
            index++;
        }
        Tree->data=*prev;
        BuildTree(Tree->left,prev+1,in,index);
        BuildTree(Tree->right,prev+1+index,in+index+1,len-index-1);
    }
    return ;
}
void PostOrder(BinaryTree* Tree)
{
    if(Tree==NULL)
        return ;
   PostOrder(Tree->left);
    PostOrder(Tree->right);
    printf("%c",Tree->data);

}
int main()
{
    char pre[101];
    char in[101];
    while (scanf("%s %s", pre, in) != EOF)
    {
        BinaryTree* tree;
        int length = strlen(pre);
        BuildTree(tree, pre, in, length);
        PostOrder(tree);
        cout << endl;
    }
    return 0;
}

